{"version":3,"sources":["layout/Header.js","../../lorem-sexum-node/src/tools/list.js","../../lorem-sexum-node/src/tools/string.js","../../lorem-sexum-node/src/tools/combinationSum.js","../../lorem-sexum-node/src/content/structure.js","../../lorem-sexum-node/src/generator/conjugator/FirstGroup.js","../../lorem-sexum-node/src/generator/conjugator/SecondGroup.js","../../lorem-sexum-node/src/generator/conjugator/ThirdGroup.js","../../lorem-sexum-node/src/generator/conjugator/index.js","../../lorem-sexum-node/src/generator/paragraph.js","Generator.js","../../lorem-sexum-node/src/generator/words.js","App.js","serviceWorker.js","index.js"],"names":["MenuItems","children","Text","mt","base","md","mr","display","Header","props","React","useState","show","setShow","Flex","as","align","justify","wrap","padding","bg","color","Heading","size","letterSpacing","role","aria-label","Box","sm","onClick","fill","width","viewBox","xmlns","d","ListTool","list","Math","floor","random","length","StringTool","word","RegExp","test","toLowerCase","combinationSumRecursive","candidates","remainingSum","finalCombinations","currentCombination","startFrom","push","slice","candidateIndex","currentCandidate","pop","order","adjectifs","possessif","value","gender","pronomsObjet","withVoyelle","sujets","nomCommuns","nom","nomCorps","pronoms","verbes","degre","prepositions","maniere","appartenance","simple","locutions","adjectivales","adverbiales","conjonctives","interjectives","determinants","adverbes","quantite","duree","randomList","randomListum","conjugator","subject","verb","terminaison","baseVerb","substr","decomposition","type","split","getTerminaisonFromPronomsAndArray","terminaisons","toUpperCase","FirstGroup","SecondGroup","ThirdGroup","Error","sizeParagraph","getNextElementSentenceFromList","forcedGender","item","getRandomInList","undefined","getSentencesFromNbWords","nbWords","mapSentences","structure","map","o","Set","result","CombinationSum","sort","forEach","filter","buildFromOrder","sentence","lastItemPushed","getStructureList","itemSentence","properties","property","shift","buildSentenceString","line","finalSentence","index","adjPossessif","beginByVowel","join","charAt","Generator","useForm","register","handleSubmit","errors","generatorType","setGeneratorType","setResult","useClipboard","Array","isArray","onCopy","hasCopied","onSubmit","data","objects","beginSentence","ipsumMode","wordLists","words","beginSentenceList","trim","randomBoolean","percentage","i","counterStart","counterEnd","randomComa","tmp","generateFromNbWords","paragraphNumber","paragraphs","sentences","stringFinal","generateByParagraphNumber","nbParagraph","RadioGroup","onChange","e","target","Radio","FormControl","isRequired","FormLabel","htmlFor","Input","name","id","defaultValue","placeholder","ref","min","max","Checkbox","defaultIsChecked","Button","variantColor","p","borderWidth","rounded","paragraph","mb","key","breakpoints","lg","xl","newTheme","theme","App","ThemeProvider","CSSReset","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.e2bcd132.chunk.js","sourcesContent":["import React from 'react';\nimport { Box, Heading, Flex, Text } from '@chakra-ui/core';\n\nconst MenuItems = ({ children }) => (\n    <Text mt={{ base: 4, md: 0 }} mr={6} display=\"block\">\n        {children}\n    </Text>\n);\n\nconst Header = (props) => {\n    const [show, setShow] = React.useState(false);\n    const handleToggle = () => setShow(!show);\n\n    return (\n        <Flex\n            as=\"nav\"\n            align=\"center\"\n            justify=\"space-between\"\n            wrap=\"wrap\"\n            padding=\"1.5rem\"\n            bg=\"teal.500\"\n            color=\"white\"\n            {...props}\n        >\n            <Flex align=\"center\" mr={5}>\n                <Heading as=\"h1\" size=\"lg\" letterSpacing={'-.1rem'}>\n                    <span role=\"img\" aria-label=\"ohh yeah\">🍆</span> Lorem Sexum\n                </Heading>\n            </Flex>\n\n         \n\n            <Box display={{ sm: 'block', md: 'none' }} onClick={handleToggle}>\n                <svg\n                    fill=\"white\"\n                    width=\"12px\"\n                    viewBox=\"0 0 20 20\"\n                    xmlns=\"http://www.w3.org/2000/svg\"\n                >\n                    <title>Menu</title>\n                    <path d=\"M0 3h20v2H0V3zm0 6h20v2H0V9zm0 6h20v2H0v-2z\" />\n                </svg>\n            </Box>\n            <Box\n                display={{ sm: show ? 'block' : 'none', md: 'flex' }}\n                width={{ sm: 'full', md: 'auto' }}\n            >\n                <MenuItems>About Us</MenuItems>\n            </Box>\n        </Flex>\n    );\n};\n\nexport default Header;\n","/**\n * Class to help manipulating list\n */\nclass ListTool {\n    /**\n     * @param {any[]} list\n     */\n    static getRandomInList(list) {\n        return list[Math.floor(Math.random() * Math.floor(list.length))];\n    };\n}\n\nexport default ListTool;\n","class StringTool {\n    /**\n     *\n     * @param {string} word\n     */\n    static beginByVowel(word) {\n        var regex = new RegExp('^[aeiouyéè]');\n        return regex.test(word.toLowerCase());\n    }\n}\n\nexport default StringTool;\n","// https://github.com/trekhleb/javascript-algorithms/tree/master/src/algorithms/sets/combination-sum\n\n/**\n * @param {number[]} candidates - candidate numbers we're picking from.\n * @param {number} remainingSum - remaining sum after adding candidates to currentCombination.\n * @param {number[][]} finalCombinations - resulting list of combinations.\n * @param {number[]} currentCombination - currently explored candidates.\n * @param {number} startFrom - index of the candidate to start further exploration from.\n * @return {number[][]}\n */\nfunction combinationSumRecursive(\n    candidates,\n    remainingSum,\n    finalCombinations = [],\n    currentCombination = [],\n    startFrom = 0\n) {\n    if (remainingSum < 0) {\n        // By adding another candidate we've gone below zero.\n        // This would mean that the last candidate was not acceptable.\n        return finalCombinations;\n    }\n\n    if (remainingSum === 0) {\n        // If after adding the previous candidate our remaining sum\n        // became zero - we need to save the current combination since it is one\n        // of the answers we're looking for.\n        finalCombinations.push(currentCombination.slice());\n\n        return finalCombinations;\n    }\n\n    // If we haven't reached zero yet let's continue to add all\n    // possible candidates that are left.\n    for (\n        let candidateIndex = startFrom;\n        candidateIndex < candidates.length;\n        candidateIndex += 1\n    ) {\n        const currentCandidate = candidates[candidateIndex];\n\n        // Let's try to add another candidate.\n        currentCombination.push(currentCandidate);\n\n        // Explore further option with current candidate being added.\n        combinationSumRecursive(\n            candidates,\n            remainingSum - currentCandidate,\n            finalCombinations,\n            currentCombination,\n            candidateIndex\n        );\n\n        // BACKTRACKING.\n        // Let's get back, exclude current candidate and try another ones later.\n        currentCombination.pop();\n    }\n\n    return finalCombinations;\n}\n\n/**\n * Backtracking algorithm of finding all possible combination for specific sum.\n *\n * @param {number[]} candidates\n * @param {number} target\n * @return {number[][]}\n */\nexport default combinationSumRecursive;","/**\n * gender :\n *  0 : féminim\n *  1 : masculin\n */\nexport default {\n    order: [\n        ['sujets.nomCommuns', 'verbes', 'sujets.nom'],\n        [\n            'sujets.nom',\n            'verbes',\n            'adverbes.quantite',\n            'adjectifs.possessif',\n            'sujets.nomCommuns',\n        ],\n        ['sujets.nomCommuns', 'verbes', 'adverbes.maniere', 'sujets.nom'],\n        [\n            'sujets.nomCommuns',\n            'verbes',\n            'adjectifs.possessif',\n            'sujets.nomCommuns',\n            'adverbes.quantite',\n        ],\n        [\n            'sujets.nomCommuns',\n            'verbes',\n            'adjectifs.possessif',\n            'sujets.nomCommuns',\n        ],\n        [\n            'sujets.nom',\n            'verbes',\n            'adjectifs.possessif',\n            'sujets.nomCommuns',\n            'prepositions.maniere',\n            'sujets.nom',\n        ],\n        [\n            'sujets.pronoms',\n            'verbes',\n            'adjectifs.possessif',\n            'sujets.nomCommuns',\n            'prepositions.maniere',\n            'sujets.nom',\n        ],\n        [\n            'sujets.nomCommuns',\n            'verbes',\n            'sujets.nomCorps',\n            'prepositions.appartenance',\n            'sujets.nom',\n        ],\n        [\n            'sujets.nomCommuns',\n            'verbes',\n            'sujets.nomCorps',\n            'prepositions.appartenance',\n            'adjectifs.possessif',\n            'sujets.nomCommuns',\n        ],\n        [\n            'sujets.nomCommuns',\n            'verbes',\n            'sujets.nomCorps',\n            'prepositions.appartenance',\n            'adjectifs.possessif',\n            'sujets.nomCommuns',\n            'locutions.adjectivales',\n        ],\n        [\n            'sujets.nomCommuns',\n            'verbes',\n            'sujets.nomCorps',\n            'prepositions.appartenance',\n            'adjectifs.possessif',\n            'sujets.nomCommuns',\n            'locutions.conjonctives',\n            'sujets.nomCommuns',\n            'verbes',\n        ],\n        // conjonctives\n    ],\n    adjectifs: {\n        /**\n         * gender 1 si le nom qui suit commence par une voyelle\n         */\n        possessif: [\n            { value: 'son', gender: 1 },\n            { value: 'mon', gender: 1 },\n            { value: 'ton', gender: 1 },\n            { value: 'ma', gender: 0 },\n            { value: 'sa', gender: 0 },\n            { value: 'ta', gender: 0 },\n            { value: 'notre', gender: 2 },\n            { value: 'votre', gender: 2 },\n            { value: 'leur', gender: 2 },\n        ],\n    },\n    pronomsObjet: [\n        {\n            value: 'le',\n            withVoyelle: \"l'\",\n            gender: 1,\n        },\n        {\n            value: 'la',\n            withVoyelle: \"l'\",\n            gender: 0,\n        },\n        {\n            value: 'les',\n            gender: 2,\n        },\n    ],\n    sujets: {\n        nomCommuns: [\n            { value: 'jardinier', gender: 1 },\n            { value: 'voisin', gender: 1 },\n            { value: 'facteur', gender: 1 },\n            { value: 'boulangère', gender: 0 },\n            { value: 'cousin', gender: 1 },\n            { value: 'cousine', gender: 0 },\n            { value: 'père', gender: 1 },\n            { value: 'mère', gender: 0 },\n            { value: 'voisine', gender: 0 },\n            { value: 'curé', gender: 1 },\n            { value: 'président', gender: 1 },\n            { value: 'maçon', gender: 1 },\n            { value: 'arbre', gender: 1 },\n            { value: 'astraunote', gender: 1 },\n            { value: 'menuisier', gender: 1 },\n            { value: 'factrice', gender: 0 },\n            { value: 'équipe de rugby', gender: 0 },\n            { value: 'grand mère', gender: 0 },\n            { value: 'collègue', gender: 1 },\n            { value: 'camarade', gender: 1 },\n            { value: 'camarade', gender: 0 },\n            { value: 'chat', gender: 1 },\n        ],\n        nom: [\n            { value: 'Stefan', gender: 1 },\n            { value: 'Matthieu', gender: 1 },\n            { value: 'Martine', gender: 0 },\n            { value: 'Josiane', gender: 0 },\n            { value: 'François', gender: 1 },\n            { value: 'Micheline', gender: 0 },\n            { value: 'René Coty', gender: 0 },\n            { value: 'Casimir', gender: 0 },\n            { value: 'Félix le chat', gender: 0 },\n        ],\n        nomCorps: [\n            {\n                value: 'chatte',\n                gender: 0,\n            },\n            {\n                value: 'cul',\n                gender: 1,\n            },\n            {\n                value: 'trou',\n                gender: 1,\n            },\n            {\n                value: 'oreilles',\n                gender: 2,\n            },\n            {\n                value: 'anus',\n                gender: 1,\n            },\n            {\n                value: 'fesses',\n                gender: 2,\n            },\n            {\n                value: 'narines',\n                gender: 2,\n            },\n            {\n                value: 'vagin',\n                gender: 1,\n            },\n        ],\n        pronoms: [\n            {\n                value: 'je',\n                withVoyelle: \"j'\",\n                gender: 1,\n            },\n            {\n                value: 'tu',\n                withVoyelle: \"t'\",\n                gender: 1,\n            },\n            {\n                value: 'il',\n                gender: 1,\n            },\n            {\n                value: 'elle',\n                gender: 0,\n            },\n            {\n                value: 'on',\n                gender: 2,\n            },\n            {\n                value: 'nous',\n                gender: 2,\n            },\n            {\n                value: 'vous',\n                gender: 2,\n            },\n            {\n                value: 'ils',\n                gender: 1,\n            },\n            {\n                value: 'elles',\n                gender: 0,\n            },\n        ],\n    },\n    verbes: [\n        { value: 'pénètrer', degre: 1 },\n        { value: 'baiser', degre: 1 },\n        { value: 'défourailler', degre: 1 },\n        { value: 'sucer', degre: 1 },\n        { value: 'sodomiser', degre: 1 },\n        { value: 'défoncer', degre: 1 },\n        { value: 'enfiler', degre: 1 },\n        { value: 'mouiller', degre: 1 },\n        { value: 'branler', degre: 1 },\n        { value: 'tromper', degre: 1 },\n        { value: 'prendre', degre: 3 },\n        { value: 'ramoner', degre: 1 },\n        { value: 'enculer', degre: 1 },\n        { value: 'galocher', degre: 1 },\n        { value: 'doigter', degre: 1 },\n        { value: 'niquer', degre: 1 },\n        { value: 'caresser', degre: 1 },\n        { value: 'biter', degre: 1 },\n        { value: 'forniquer', degre: 1 },\n        { value: 'casser', degre: 1 },\n        { value: 'culbuter', degre: 1 },\n        { value: 'labourer', degre: 1 },\n        { value: 'brouter', degre: 1 },\n    ],\n    prepositions: {\n        maniere: ['avec', 'sans', 'pour'],\n        appartenance: ['de'],\n        simple: ['à', 'chez', 'dans', 'entre', 'jusque', 'hors', 'par', 'vers'],\n    },\n    locutions: {\n        adjectivales: ['comme il faut'],\n        adverbiales: ['en vain'],\n        conjonctives: ['pendant que', 'sans compter que'],\n        interjectives: ['par exemple'],\n        determinants: ['n’importe quel'],\n    },\n    adverbes: {\n        maniere: [\n            'amoureusement',\n            'pépouze',\n            'en tout amitié',\n            'avec bienveillance',\n            'goûlument',\n            'salement',\n            'facilement',\n            'bien',\n            'mieux',\n            'comme',\n            'exprès',\n            'franco',\n            'gratis',\n            'incognito',\n            'mal',\n            'mieux',\n            'plutôt',\n            'presque',\n            'vite',\n            'volontiers',\n            'admirablement',\n            'bravement',\n            'brutalement',\n            'clairement',\n            'doucement',\n            'également',\n            'gentiment',\n            'lentement',\n            'délicieusement',\n        ],\n        quantite: [\n            'divinement',\n            'drôlement',\n            'encore',\n            'entièrement',\n            'extrêmement',\n            'fort',\n            'grandement',\n            'guère',\n            'infiniment',\n        ],\n        /**\n         * et répitition\n         */\n        duree: [],\n    },\n    randomList: [\n        'sodomie',\n        'fellation',\n        'baguette',\n        'anal',\n        'sex',\n        'cohit',\n        'branllette',\n        'partouze',\n        'orgie',\n        'anus',\n        'cunnilingus',\n        'érotique',\n        'sexe',\n        'clitori',\n        'con',\n        'cul',\n        'entre-cuisse',\n        'zizi',\n        'membre-virile',\n        'nympho',\n        'organe-génitale',\n        'pénis',\n        'col',\n        'pubis',\n        'quéquette',\n        'queue',\n        'sexualité',\n        'vaginal',\n        'verge',\n        'vulve',\n        'dildo',\n        'encule',\n        'urêtre',\n        'threesome',\n        'boobs',\n        'chatte',\n        'minou',\n        'porno',\n        'défoncer',\n        'pénétrer',\n        'masturber'\n    ],\n    randomListum: [\n        'sodomium',\n        'fellatio',\n        'baguette',\n        'anal',\n        'sexum',\n        'cohitum',\n        'branlloum',\n        'partouzem',\n        'orgium',\n        'anus',\n        'cunnilingus',\n        'érotisum',\n        'sexus',\n        'clitorisum',\n        'conum',\n        'cul',\n        'entrecuissum',\n        'membre-virilus',\n        'nymphes',\n        'organes-génitaum',\n        'pénius',\n        'coles',\n        'pubisa',\n        'quéquettum',\n        'queuea',\n        'sexualitum',\n        'vagina',\n        'vergem',\n        'virilitum',\n        'vulvus',\n    ],\n};\n","const conjugator = (subject, verb) => {\n    let terminaison = '';\n    const baseVerb = verb.value.substr(0, verb.value.length - 2);\n    const decomposition = subject.type.split('.');\n    switch (decomposition[decomposition.length - 1]) {\n        case 'nomCommuns':\n        case 'nom':\n            terminaison = 'e';\n            break;\n        case 'pronoms':\n            switch (subject.value) {\n                case 'je':\n                    terminaison = 'e';\n                    break;\n                case 'tu':\n                    terminaison = 'es';\n                    break;\n                case 'il':\n                case 'elle':\n                case 'on':\n                    terminaison = 'e';\n                    break;\n                case 'nous':\n                    terminaison = 'ons';\n                    break;\n                case 'vous':\n                    terminaison = 'ez';\n                    break;\n                case 'ils':\n                case 'elles':\n                    terminaison = 'ent';\n                    break;\n                default:\n                    break;\n            }\n            break;\n        default:\n            break;\n    }\n    return baseVerb + terminaison;\n};\nexport default conjugator;\n","const conjugator = (subject, verb) => {\n    let terminaison = '';\n    const baseVerb = verb.value.substr(0, verb.value.length - 2);\n    const decomposition = subject.type.split('.');\n\n    switch (decomposition[decomposition.length - 1]) {\n        case 'nomCommuns':\n        case 'nom':\n            terminaison = 'it';\n            break;\n        case 'pronoms':\n            switch (subject.value) {\n                case 'je':\n                    terminaison = 'is';\n                    break;\n                case 'tu':\n                    terminaison = 'is';\n                    break;\n                case 'il':\n                case 'elle':\n                case 'on':\n                    terminaison = 'it';\n                    break;\n                case 'nous':\n                    terminaison = 'issons';\n                    break;\n                case 'vous':\n                    terminaison = 'issez';\n                    break;\n                case 'ils':\n                case 'elles':\n                    terminaison = 'issent';\n                    break;\n                default:\n                    break;\n            }\n            break;\n        default:\n            break;\n    }\n    return baseVerb + terminaison;\n};\nexport default conjugator;\n","const getTerminaisonFromPronomsAndArray = (subject, terminaisons) => {\n    let terminaison = null;\n    switch (subject.type) {\n        case 'sujets.nomCommuns':\n        case 'sujets.nom':\n            terminaison = terminaisons[1];\n            break;\n        case 'sujets.pronoms':\n            switch (subject.value) {\n                case 'je':\n                case 'tu':\n                    terminaison = terminaisons[0];\n                    break;\n                case 'il':\n                case 'elle':\n                case 'on':\n                    terminaison = terminaisons[1];\n                    break;\n                case 'nous':\n                    terminaison = terminaisons[2];\n                    break;\n                case 'vous':\n                    terminaison = terminaisons[3];\n                    break;\n                case 'ils':\n                case 'elles':\n                    terminaison = terminaisons[4];\n                    break;\n                default:\n                    break;\n            }\n            break;\n        default:\n            break;\n    }\n    return terminaison;\n};\n\n/**\n *\n * @param {object} subject\n * @param {object} verb\n */\nconst conjugator = (subject, verb) => {\n    let terminaison = '';\n    let baseVerb = '';\n    if (\n        verb.value.substr(verb.value.length - 6).toUpperCase() === 'AINDRE' ||\n        verb.value.substr(verb.value.length - 6).toUpperCase() === 'EINDRE'\n    ) {\n        baseVerb = verb.value.substr(0, verb.value.length - 6);\n        terminaison = getTerminaisonFromPronomsAndArray(subject, [\n            'ns',\n            'nt',\n            'gnons',\n            'gnez',\n            'gnent',\n        ]);\n    }\n    if (verb.value.substr(verb.value.length - 6).toUpperCase() === 'OINDRE') {\n        baseVerb = verb.value.substr(0, verb.value.length - 6);\n        terminaison = getTerminaisonFromPronomsAndArray(subject, [\n            'ns',\n            'nt',\n            'gnons',\n            'gnez',\n            'gnent',\n        ]);\n    }\n    if (verb.value.substr(verb.value.length - 5).toUpperCase() === 'OUDRE') {\n        baseVerb = verb.value.substr(0, verb.value.length - 5);\n        terminaison = getTerminaisonFromPronomsAndArray(subject, [\n            'ns',\n            'nt',\n            'gnons',\n            'gnez',\n            'gnent',\n        ]);\n    }\n    if (verb.value.substr(verb.value.length - 4).toUpperCase() === 'OIRE') {\n        baseVerb = verb.value.substr(0, verb.value.length - 4);\n        terminaison = getTerminaisonFromPronomsAndArray(subject, [\n            'ois',\n            'oit',\n            'oyons',\n            'oyez',\n            'oient',\n        ]);\n    }\n    if (verb.value.substr(verb.value.length - 3).toUpperCase() === 'OIR') {\n        baseVerb = verb.value.substr(0, verb.value.length - 3);\n        terminaison = getTerminaisonFromPronomsAndArray(subject, [\n            'ois',\n            'oit',\n            'oyons',\n            'oyez',\n            'oient',\n        ]);\n    }\n\n    if (verb.value.substr(verb.value.length - 3).toUpperCase() === 'DRE') {\n        baseVerb = verb.value.substr(0, verb.value.length - 3);\n        // je morDS-  tu morDS - il/elle morD - nous morDONS - vous morDEZ - ils/elles morDENT\n        terminaison = getTerminaisonFromPronomsAndArray(subject, [\n            'ds',\n            'd',\n            'ons',\n            'ez',\n            'ent',\n        ]);\n    }\n\n    if (verb.value.substr(verb.value.length - 3).toUpperCase() === 'TRE') {\n        baseVerb = verb.value.substr(0, verb.value.length - 3);\n        terminaison = getTerminaisonFromPronomsAndArray(subject, [\n            'ds',\n            'd',\n            'ons',\n            'ez',\n            'ent',\n        ]);\n    }\n    if (verb.value.substr(verb.value.length - 2).toUpperCase() === 'IR') {\n        baseVerb = verb.value.substr(0, verb.value.length - 2);\n        terminaison = getTerminaisonFromPronomsAndArray(subject, [\n            'ds',\n            'd',\n            'ons',\n            'ez',\n            'ent',\n        ]);\n    }\n\n    return baseVerb + terminaison;\n};\nexport default conjugator;\n","import FirstGroup from './FirstGroup';\nimport SecondGroup from './SecondGroup';\nimport ThirdGroup from './ThirdGroup';\n\n/**\n * Dispatch the verb to appropriate group with subject to\n * identify the terminaison\n *\n * @param {Object} subject\n * @param {Object} verb\n */\nconst conjugator = (subject, verb) => {\n    if (verb.degre) {\n        switch (verb.degre) {\n            case 1:\n                return FirstGroup(subject, verb);\n            case 2:\n                return SecondGroup(subject, verb);\n            case 3:\n                return ThirdGroup(subject, verb);\n            default:\n                throw new Error('degre is required of 1, 2 or 3');\n        }\n    }\n    throw new Error('degre is required');\n};\n\nexport default conjugator;\n","import structure from '../content/structure';\nimport conjugator from './conjugator';\nimport { ListTool, StringTool, CombinationSum } from '../tools';\n\nconst sizeParagraph = {\n    small: 30,\n    medium: 50,\n    large: 70,\n};\n\n/**\n * @param {array} list\n * @param {number} forcedGender\n */\nconst getNextElementSentenceFromList = (list, forcedGender) => {\n    const item = ListTool.getRandomInList(list);\n    if (forcedGender !== undefined && item.gender !== undefined) {\n        if (item.gender !== forcedGender && forcedGender !== 2) {\n            return getNextElementSentenceFromList(list, forcedGender);\n        }\n    }\n    return item;\n};\n\n/**\n * @param {number} paragraphNumber\n * @return {number[]}\n */\nconst generateByParagraphNumber = (paragraphNumber) => {\n    const paragraphs = [];\n    for (let i = 0; i < paragraphNumber; i++) {\n        const sentences = getSentencesFromNbWords(sizeParagraph.small);\n\n        let stringFinal = '';\n        sentences.forEach((sentence) => {\n            stringFinal += ' ' + buildSentenceString(buildFromOrder(sentence));\n        });\n        stringFinal += '\\n\\n';\n        paragraphs.push(stringFinal);\n    }\n    return paragraphs;\n};\n\n/**\n *\n * @param {number} nbWords\n */\nconst getSentencesFromNbWords = (nbWords) => {\n    const mapSentences = [];\n    let candidates = structure.order.map((o) => o.length);\n    candidates = [...new Set(candidates)];\n\n    const result = CombinationSum(candidates, nbWords);\n    const randomOrderSentences =\n        result[Math.floor(Math.random() * Math.floor(result.length))];\n\n    const newOrder = randomOrderSentences.sort(() => Math.random() - 0.5);\n\n    newOrder.forEach((size) => {\n        mapSentences.push(\n            getNextElementSentenceFromList(\n                structure.order.filter((o) => o.length === size)\n            )\n        );\n    });\n    return mapSentences;\n};\n\n\n/**\n *\n * @param {array} order\n */\nconst buildFromOrder = (order) => {\n    const sentence = [];\n\n    order.forEach((item) => {\n        const lastItemPushed = sentence[sentence.length - 1];\n        const decomposition = item.split('.');\n        if (decomposition.length > 0) {\n            const list = getStructureList(structure, decomposition);\n            let itemSentence = getNextElementSentenceFromList(\n                list,\n                lastItemPushed ? lastItemPushed.gender : undefined\n            );\n            if (typeof itemSentence !== 'object') {\n                itemSentence = { value: itemSentence };\n            }\n            itemSentence.type = item;\n            sentence.push(itemSentence);\n        }\n    });\n\n    return sentence;\n};\n\n/**\n * return the list from properties\n *\n * @param {Object} structure dictionnary of the word with specificities\n * @param {array} properties path to get list\n * @return {null}\n */\nconst getStructureList = (structure, properties) => {\n    if (properties.length > 1) {\n        const property = properties.shift();\n        if (property in structure) {\n            return getStructureList(structure[property], properties);\n        }\n    } else if (properties.length === 1) {\n        const property = properties.shift();\n        return structure[property];\n    }\n    return null;\n};\n\n/**\n * Build the sentence depending on the difference type of words\n * @param {array} line array of composition of the sentence with options\n */\nconst buildSentenceString = (line) => {\n    const sentence = line.map((item, index) => {\n        switch (item.type) {\n            case 'verbes':\n                const verbeValue = conjugator(line[index - 1], item);\n                return verbeValue;\n            case 'sujets.nomCorps':\n            case 'sujets.nomCommuns':\n                if (line[index - 1]) {\n                    if (line[index - 1].type === 'adjectifs.possessif') {\n                        return item.value;\n                    }\n                }\n                let adjPossessif = '';\n\n                switch (item.gender) {\n                    case 0:\n                        adjPossessif = StringTool.beginByVowel(item.value)\n                            ? \"l'\"\n                            : 'la';\n                        break;\n                    case 1:\n                        adjPossessif = StringTool.beginByVowel(item.value)\n                            ? \"l'\"\n                            : 'le';\n                        break;\n                    case 2:\n                        adjPossessif = 'les';\n                        break;\n                    default:\n                        break;\n                }\n\n                return adjPossessif + ' ' + item.value;\n            case 'prepositions.appartenance':\n                if (line[index + 1]) {\n                    return StringTool.beginByVowel(line[index + 1].value)\n                        ? \"d'\"\n                        : item.value;\n                }\n                break;\n            default:\n                return item.value;\n        }\n    });\n\n    let finalSentence = sentence.join(' ');\n    finalSentence =\n        finalSentence.charAt(0).toUpperCase() + finalSentence.slice(1) + '.';\n    return finalSentence;\n};\n\nexport { generateByParagraphNumber};\n","import {\n    FormControl,\n    FormLabel,\n    Button,\n    Input,\n    Box,\n    Text,\n    Checkbox,\n    Radio,\n    RadioGroup,\n    useClipboard,\n} from '@chakra-ui/core';\nimport React, { useState } from 'react';\nimport { useForm } from 'react-hook-form';\nimport {\n    generateFromNbWords,\n    generateByParagraphNumber,\n} from '@lorem-sexum/node';\n\nfunction Generator() {\n    const { register, handleSubmit, errors } = useForm();\n    const [generatorType, setGeneratorType] = React.useState('words');\n    const [result, setResult] = useState('');\n    const { onCopy, hasCopied } = useClipboard(\n        Array.isArray(result) ? result.join('') : result\n    );\n    const beginSentence = 'Lorem sexum dolor sit amet';\n\n    const onSubmit = (data) => {\n        let objects;\n        switch (generatorType) {\n            case 'words':\n                objects = generateFromNbWords(\n                    data.nbWords,\n                    data.beginSentence ? beginSentence : null,\n                    data.ipsumMode\n                );\n                break;\n            // TODO : faire la distinction entre paragraph et vraies phrases\n            case 'paragraphs':\n                objects = generateByParagraphNumber(data.nbParagraph);\n                break;\n            default:\n                break;\n        }\n        setResult(objects);\n    };\n\n    return (\n        <div>\n            <form onSubmit={handleSubmit(onSubmit)}>\n                <RadioGroup\n                    onChange={(e) => setGeneratorType(e.target.value)}\n                    value={generatorType}\n                >\n                    <Radio value=\"words\">Words</Radio>\n                    <Radio value=\"paragraphs\">Paragraphs</Radio>\n                </RadioGroup>\n                {generatorType === 'words' ? (\n                    <>\n                        <FormControl isRequired>\n                            <FormLabel htmlFor=\"nbWords\">\n                                Number of words\n                            </FormLabel>\n                            <Input\n                                name=\"nbWords\"\n                                id=\"nbWords\"\n                                type=\"number\"\n                                defaultValue=\"24\"\n                                placeholder=\"Number of words\"\n                                ref={register({ min: 1, max: 2000 })}\n                            />\n                            {errors.nbWords && (\n                                <span>This field is required</span>\n                            )}\n                        </FormControl>\n                        <FormControl>\n                            <Checkbox\n                                ref={register}\n                                name=\"beginSentence\"\n                            >\n                                Begin with the sentence \"{beginSentence}\"\n                            </Checkbox>\n                        </FormControl>\n                        <FormControl>\n                            <Checkbox\n                                ref={register}\n                                name=\"ipsumMode\"\n                                defaultIsChecked\n                            >\n                                Ipsum Mode\n                            </Checkbox>\n                        </FormControl>\n                    </>\n                ) : null}\n                {generatorType === 'paragraphs' ? (\n                    <FormControl isRequired>\n                        <FormLabel htmlFor=\"nbParagraph\">\n                            Number of Paragrah\n                        </FormLabel>\n                        <Input\n                            name=\"nbParagraph\"\n                            id=\"nbParagraph\"\n                            type=\"number\"\n                            defaultValue=\"3\"\n                            placeholder=\"Number of paragraph\"\n                            ref={register({ min: 1, max: 99 })}\n                        />\n                        {errors.nbWords && <span>This field is required</span>}\n                    </FormControl>\n                ) : null}\n\n                <Button type=\"submit\" mt={4} variantColor=\"teal\">\n                    Generate pleasure <span role=\"img\" aria-label=\"hum\">💦</span>\n                </Button>\n                {result ? (\n                    <Button onClick={onCopy} mt={4}>\n                        {hasCopied ? 'Copied' : 'Copy'}\n                    </Button>\n                ) : null}\n            </form>\n            {result ? (\n                <Box mt=\"4\" p=\"4\" borderWidth=\"1px\" rounded=\"lg\">\n                    {Array.isArray(result) ? (\n                        result.map((paragraph, index) => {\n                            return (\n                                <Text mb=\"2\" as=\"p\" key={index}>\n                                    {paragraph}\n                                </Text>\n                            );\n                        })\n                    ) : (\n                        <Text>{result}</Text>\n                    )}\n                </Box>\n            ) : null}\n        </div>\n    );\n}\n\nGenerator.propTypes = {};\n\nexport default Generator;\n","import structure from '../content/structure';\nimport { ListTool, CombinationSum } from '../tools';\n\n// 'Lorem sexum douleur bite amet'\n/**\n *\n * @param {Number} nbWords\n * @param {string} beginSentence\n */\nconst generateFromNbWords = (\n    nbWords,\n    beginSentence = null,\n    ipsumMode = false,\n    wordLists = null\n) => {\n    let words = [];\n    nbWords = ~~nbWords;\n    let beginSentenceList = []\n    if (beginSentence !== null && beginSentence.trim().length > 0) {\n        beginSentenceList = beginSentence.trim().split(' ');\n        nbWords -= beginSentenceList.length;\n        words = [...beginSentenceList];\n    }\n\n    /**\n     * Get True of False\n     * @example https://stackoverflow.com/questions/36756331/js-generate-random-boolean#answers-header\n     * @param {int} percentage of luck to have a true (max is 100)\n     */\n    const randomBoolean = (percentage = 50) => {\n        if (percentage > 100) {\n            percentage = 100;\n        }\n        return Math.random() >= (100 - percentage) / 100;\n    };\n\n    // add punctuation\n    const result = CombinationSum([5, 7, 8, 9, 10], nbWords + beginSentenceList.length);\n    // TODO : ici le but est de choisir le resultat qui a le plus de\n    // valeurs différentes genre (7 7 8 9) au lieu de 7 7 7 7\n    // pour ensuite le mélanger pour avoir les phrases.\n\n    // let counterDiff = 0;\n    // result.map(table => {\n    //     const\n    //     table.map(value => {\n\n    //     })\n    // })\n    for (let i = 0; i < nbWords; i++) {\n        words.push(\n            ListTool.getRandomInList(\n                wordLists\n                    ? wordLists\n                    : ipsumMode\n                    ? structure.randomListum\n                    : structure.randomList\n            )\n        );\n    }\n\n    // Add punctuation ?\n    let counterStart = 0;\n    let counterEnd = 0;\n    \n    for (let i = 0; i < result[0].length; i++) {\n        counterStart += i === 0 ? 0 : result[0][i - 1];\n        counterEnd += result[0][i];\n\n        words[counterEnd - 1] = words[counterEnd - 1] + '.';\n        if (randomBoolean(60)) {\n            const randomComa = Math.floor((counterEnd - counterStart) / 2);\n\n            if (counterStart + randomComa < counterEnd) {\n                words[counterStart + randomComa] =\n                    words[counterStart + randomComa] + ',';\n            }\n        }\n        if (words[counterEnd] !== undefined) {\n            let tmp = words[counterEnd];\n            words[counterEnd] = tmp.charAt(0).toUpperCase() + tmp.slice(1);\n        }\n    }\n\n    let finalSentence = words.join(' ');\n\n    finalSentence =\n        finalSentence.charAt(0).toUpperCase() + finalSentence.slice(1);\n\n    return finalSentence;\n};\n\nexport { generateFromNbWords };\n\n// TODO : prendre en compte les noms dans la liste qui sont séparé par un espace\n// par exemple \"membre viril\" qui du coup compte pour 2 mots\n","import React from 'react';\n\nimport './App.css';\nimport Header from './layout/Header';\nimport { theme, ThemeProvider, CSSReset, Box } from '@chakra-ui/core';\nimport Generator from './Generator';\n\nconst breakpoints = ['360px', '768px', '1024px', '1440px'];\nbreakpoints.sm = breakpoints[0];\nbreakpoints.md = breakpoints[1];\nbreakpoints.lg = breakpoints[2];\nbreakpoints.xl = breakpoints[3];\n\nconst newTheme = {\n    ...theme,\n    breakpoints,\n};\n\nfunction App() {\n    return (\n        <ThemeProvider theme={newTheme}>\n            <CSSReset />\n            <Header />\n            <Box p={4}>\n                <Generator />\n            </Box>\n        </ThemeProvider>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}